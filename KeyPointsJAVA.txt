1)Method can't have duplicate copy of an other method
2)complier error--error that voliating grammer of the lang
3)Java is case sensitive
4)Main method can overloaded but not an good practice
4)Method overloaded - same method with different parameters list
5)Main method is not found--runtime error
6)Main method must be static,public
7)Return type of the main method must be void
8)Parameters of the main method must be an string array
9)Identifier -- names that identify various elements
  -- must starts with a letter or an underscore or dollar
symbol
  -- from the second character, identifiers can have any
combinations of letter or digits or dollar symbol
  -- Keywords Cannot be used as an identifier
  -- No other special symbols are allowed except
underscore and dollar 
  -- should follow camelCase
10)The type of any fractional(decimal no)numbers  
is double by default 
11)Java is strongly typed language(float value can stored
only in float datatype)
12)Python or JS weakly/Loosely typed language
13)Possible loss of position error(Type casting)
14)Instance Variable -If not initialized,it will assign default
value(Inside class outside the method) can accessible by
any of the methods defined inside the class
15)Constructor doesn't have any return type
16)Normal method can share class name but not an good
practice
17)method will get exectued only if called
18)(byte code makes)Java is platform independent
19)Byte code to specific platform (JVM)Interperter which
is platform dependent
20)Object oriented 3Principles: inhertiance,polymorpism &
encapsulation. Without class&object we can't write javaPrgm
Java is purly OOPS.C++ is partially OOPS
21)Java doesn't supports Pointers & operator overloading
22)Java implicty allocates its memory by JVM 
reference of an address--reference variable
23)+,&,! --> Some operators implicty overloaded explicty none of an
opertors can overload.
24)Length is an attribute for an array. Length is an
method for an string


30-09-2022

1) Every conditional statement must returns boolean value 
else it an complier error
2) comparing dissimilar data types is illogical
2) Numeric String s="123" / String.valueOf()
can't allow string to int
3) converting char string to integer it helds number format
error
4) Assignment operations --right to left
5) Every true statement--- torterlergy
every false ---
6) == -->comparsion = -->assign
7) If statement can exist independent every else statement
 must requires matching if statement.
8) try can't exist independently
9) Skipping/Ignore the evalution of certain sub expression(s)
in an expression is known as ShortCircuit (|| &&)
10) Switch expression can't be float,double,long,boolean
(only int values(byte,short,int)strings or enum)
11) Switch case can be jumped order
12) Local Variable scope is within the block


14.10.2022

1) Object - Physical Entity that has well defined boundaries
2) Term Class came from CLASSification 
3) Behaviour - action exhibited by an object
4) Class - Model/template/bluePrint/protoType of an Object that depicts the
characteristics and behaviour of an object
5) Modeling Rule : physical characteristics --> instance variable
                               behaviour --> methods()
6) Encapsulation - Implementation of a Class -->binding the physical characteristics 
 and behaviour of an object 
7) Object is an intangible entity i.e created from a class using NEW operator
8) New operator allocates memory for an object in heap memory
9) Instance Variable should be private as much as possible -- probhit the direct access of variable using object
but can access indirectly (Setter&getter)
10) Class with private instance variables & public methods --> Strictly Encapsulation Class
or Fully/tightly Encapsulation Class
11) (Self Dependency of an object)Dependency within the object should be more --> Cohesion 
12) Dependency among other objects should be less --> Coupling
13) Object should be constructed -- Highly Cohesive & loosely Coupled(Cohesion > Coupling)
14) Object Creation == Instantiation 
15) Constructor Characteristics 
  --> Constructor can't be invoked explicity
  --> Same name as className
  --> Doesn't have any return type
  --> Constructor shares the same access modifier of an class
  --> Special type of method that gets invoked implicity during instantiation(Object Creation) 
       for thr Purpose of initializing the state/fields/instanceVariables of an object
16) Constructors can use any access modifier, including private -- True (SingleTon Design Pattern)
         Private Constructor --> Can't create object outside the cls but create object in other method inside the class like static name getInstance() { return new name(); }
         class obj = name.getInstance();
17) In the absence of ANY constructor, a zero argument constructor is provided by default.
18) Types of Constructors -- No/zero argument constructor(non parameter)
                                             Parameterized constructor -->Copy Constructor : Parameter is an object type
19) Prefectly legal to have a method sharing the class name but bad practice
20) In a inheritance hierachy , object constructor(creation)parent to child
21) Firstline of an constructor is an super()-->parent this() -->same class
22) In the absence of super()/this() , complier provide super() as firstline in constructor by default
23) No concept of orphan object exist in Java (or) Every Class must inherit one another class except object class
      Object class is an Ultimate super class
24) class A{
	A(){
		A(5); // this(5)no error PN o/p
		System.out.print("N");
	}
	A(int x){
		System.out.print("P");
	}
}

public class JavaDemo {
	public static void main(String[] args) {
	A a=new A();
	}
}
 Complier Error

28.10.2022

 Superclass reference variable = subclass object type -->polypormishm to achieve
 eg Cat cat = new PersianCat();
1) polymorphism(run time in IT) is not possible without inhertiance
2) which are not overrided/inherited?
 - Private method will not inherit
 - Final method 
 - Static method
3) Only if over ridden, it goese object reference Persiancat(); 
4) No over ridding it goes left side Cat cat
Why Method Overriding - redefing the superclass method only by inherits
5) When an superclass method can be overrided by a subclass?
 - A superclass method can be overrided only if it is inheritable //by subclass(accessible)
  ***What is Method overriding?
It is the property of a superclass where in the 
subclass can redefine the super cls behaviour
6) In presence of overriding,Which overrided method is to be invoked is decided at runtime
based on assigned object type.
7) In the absence of overriding the method invoke is decided at compile
time based on reference type.
// instance variable can access (MO)
8) Shadowing(hiding) - when a subclass instance variable shared the same instance variable name as superclass
masking the superclass instance
behaviour-->defining
masking the inherited property -->shadow


09-11-2022

1) main() method can be overloaded but cannot be overrided. State True or False. --> True
but not an good practice
2) By default any decimal number assume as double data type
3) By default any whole number assume as integer data type
4) What is method Overloading? 
  Method that share same method name but varies in argument list are referred
as overloaded methods.
  Variation in argument List
 * No of arguments
 * Datatypes of the arguments
 * Order of the arguments
5) Why Method Overloading? When to prefer method overloading?
 It offers a invokation convenience to a programmer by retaining same name for method
that perform similar operations on varied arguments.
6) Method Overloading ---> Compile time phenomena 
7) In the absence of exact match argument type, complie chose with equilavent match argument
type
 Int--->long,float
8) Reference Type --In overloaded method is invoked based on reference type( parent class)


Method Overloading   -- compile time poly    
1) Phenomena: Compile time phenomena
2) Argument: must vary in argument list
3) Return Type: can change in return type
4) Access modifiers: can change in access modifiers
5) Method Existence: can appear within same class or can spread across super cls & sub cls
6) Invokation: overloaded method selection is determined based on reference type
7) Exception: 

Method Overriding -- run time poly
1) Run time Phenomena
2) must not vary in argument list
3) can share same return type or covarient return type
4) can't have a more restrictive more level
5) can appear only in sub class
6) overrided method selection is determined based on object type


15.11.2022
1) Can't access the non static variable in static field
2) Static variables are class variables
3) Local Variables can't be static & can't appliable access modifier
4) Local Variables appliable only FINAL modifiers
5) Final Class cannot be inherited by the subclass
6) Method without body/definition is called as abstract methods
7) If class has atleast one method as abstract then class should be abstract class
8) Abstract class can't be instansitzed
9) Method with definition is called concrete class
10) Abstract class can have only concrete method also
11) Before Java 8 Interface is 100%  abstraction 

